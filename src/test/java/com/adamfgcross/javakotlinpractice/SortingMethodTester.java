package com.adamfgcross.javakotlinpractice;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import org.junit.jupiter.api.DisplayName;
import org.junit.runners.Parameterized;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Random;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class SortingMethodTester {

    @Parameterized.Parameter
    public SortingMethodForTest sortingMethodForTest;

    public static class SortingMethodForTest {
        public final String name;
        public final SortingMethod sortingMethod;

        public SortingMethodForTest(String name, SortingMethod sortingMethod) {
            this.name = name;
            this.sortingMethod = sortingMethod;
        }
        @Override
        public String toString() {
            return name;
        }
    }

    public static List<SortingMethodForTest> data() {
        return Arrays.asList(
                new SortingMethodForTest("QuickSort", new QuickSort()),
                new SortingMethodForTest("MergeSort", new MergeSortKt()),
                new SortingMethodForTest("BubbleSort", new BubbleSortKt()),
                new SortingMethodForTest("SelectionSort", new SelectionSortKt()),
                new SortingMethodForTest("InsertionSort", new InsertionSortKt()),
                new SortingMethodForTest("HeapSort", new HeapSortKt())
        );
    }

    private static boolean isSorted(int[] array) {
        for (int i = 0; i < array.length - 1; i++ ) {
            if (array[i] > array[i+1])
                return false;
        }
        return true;
    }

    @DisplayName("Sorts a list of 1 element.")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortsOneElement(SortingMethodForTest sortingMethodForTest) {
        int[] input = {5};
        int[] expectedOutput = {5};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts empty array.")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortsEmptyArray(SortingMethodForTest sortingMethodForTest) {
        int[] input = {};
        int[] expectedOutput = {};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Can handle null input.")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testNullDoesNotThrow(SortingMethodForTest sortingMethodForTest) {
        assertDoesNotThrow(()->{
            sortingMethodForTest.sortingMethod.sort(null);
        });
    }

    @DisplayName("Sorts a short list of positive integers (1).")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortShortArray0(SortingMethodForTest sortingMethodForTest) {
        int[] input = {4, 2, 1, 3};
        int[] expectedOutput = {1, 2, 3, 4};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts a short list of positive integers (2).")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortShortArray1(SortingMethodForTest sortingMethodForTest) {
        int[] input = {4,3,8,4,6,5};
        int[] expectedOutput = {3,4,4,5,6,8};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts four elements already sorted")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortShortAlreadyOrdered(SortingMethodForTest sortingMethodForTest) {
        int[] input = {1, 2, 3, 4};
        int[] expectedOutput = {1, 2, 3, 4};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts four elements in reverse order")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortFourEltsReversed(SortingMethodForTest sortingMethodForTest) {
        int[] input = {4, 3, 2, 1};
        int[] expectedOutput = {1, 2, 3, 4};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }


    @DisplayName("Sorts five elements already sorted")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortFiveAlreadyOrdered(SortingMethodForTest sortingMethodForTest) {
        int[] input = {1, 2, 3, 4, 5};
        int[] expectedOutput = {1, 2, 3, 4, 5};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts a 13-element array (odd)")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSort13EltArray(SortingMethodForTest sortingMethodForTest) {
        int[] input = {220,4,3,8,6,2,2,9,18,2,1,39,2};
        int[] expectedOutput = {1,2,2,2,2,3,4,6,8,9,18,39,220};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts a 14-element array")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSort14EltArray(SortingMethodForTest sortingMethodForTest) {
        int[] input = {220,4,3,8,6,2,2,9,18,2,1,39,2, 1};
        int[] expectedOutput = {1,1,2,2,2,2,3,4,6,8,9,18,39,220};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts a Random 100-Element Array (1)")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortRandomArray100_1(SortingMethodForTest sortingMethodForTest) {
        int[] input = new int[100];
        for (int i = 0; i < input.length; i++) {
            Random random = new Random();
            input[i] = random.nextInt(1000);
        }
        sortingMethodForTest.sortingMethod.sort(input);
        assertTrue(isSorted(input));
    }

    @DisplayName("Sorts a Random 100-Element Array (2)")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortRandomArray100_2(SortingMethodForTest sortingMethodForTest) {
        int[] input = new int[100];
        for (int i = 0; i < input.length; i++) {
            Random random = new Random();
            input[i] = random.nextInt(1000);
        }
        sortingMethodForTest.sortingMethod.sort(input);
        assertTrue(isSorted(input));
    }

    @DisplayName("Sorts a Random 100-Element Array (3)")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortRandomArray100_3(SortingMethodForTest sortingMethodForTest) {
        int[] input = new int[100];
        for (int i = 0; i < input.length; i++) {
            Random random = new Random();
            input[i] = random.nextInt(1000);
        }
        sortingMethodForTest.sortingMethod.sort(input);
        assertTrue(isSorted(input));
    }

    @DisplayName("Sorts a Random 10_000-Element Array")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSortRandomArray10_000(SortingMethodForTest sortingMethodForTest) {
        int[] input = new int[10_000];
        for (int i = 0; i < input.length; i++) {
            Random random = new Random();
            input[i] = random.nextInt(100_000);
        }
        sortingMethodForTest.sortingMethod.sort(input);
        assertTrue(isSorted(input));
    }

    @DisplayName("Sorts a 1000-Element Array (1)")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSort1000ElementArray1(SortingMethodForTest sortingMethodForTest) {
        int[] input = {8142, 5241, 7800, 4014, 7929, 3799, 5634, 6539, 282, 4197, 5643, 1394, 1115, 1436, 8087, 517, 239, 1063, 5236, 6796, 4832, 9543, 9936, 5039, 3352, 7989, 2216, 2379, 9873, 175, 4694, 7463, 7212, 426, 8980, 1093, 6114, 3474, 767, 5809, 3018, 4058, 914, 9692, 7706, 8650, 1844, 2750, 6467, 2313, 3019, 3350, 8739, 1086, 3879, 215, 1972, 1118, 6196, 5009, 6455, 3220, 4773, 9251, 4154, 6554, 9875, 870, 5495, 5973, 7379, 7259, 3487, 2479, 9489, 9238, 1871, 3926, 4403, 1840, 7938, 1098, 7166, 2660, 6183, 6146, 6236, 6881, 9745, 3185, 5665, 1752, 8366, 5678, 6897, 1170, 929, 4612, 8359, 2342, 792, 6681, 5623, 5824, 412, 1285, 1897, 7973, 3518, 7142, 9425, 6575, 8068, 2076, 3030, 4609, 8333, 8308, 6286, 4234, 1725, 1030, 7016, 9248, 3150, 9956, 5298, 9847, 9892, 1501, 3172, 8439, 3086, 4022, 1783, 2155, 6553, 1329, 1767, 9676, 798, 244, 5482, 4839, 9778, 5669, 2992, 3606, 2486, 7608, 5894, 6122, 6384, 8156, 1805, 9240, 1780, 6467, 3665, 3747, 5671, 746, 1430, 2181, 7608, 8503, 8268, 7734, 5719, 5070, 9875, 5087, 2616, 1967, 4598, 3643, 6256, 1893, 6437, 6077, 2397, 9409, 9276, 1158, 6984, 6913, 7010, 9495, 3151, 4515, 1477, 7238, 6723, 9650, 9580, 4246, 7469, 1123, 7750, 1760, 5331, 923, 7098, 2909, 4556, 2175, 3156, 9993, 6190, 4233, 9373, 5141, 4033, 9346, 9940, 9318, 3372, 4662, 3832, 2459, 9920, 195, 8607, 4888, 6485, 7124, 5504, 7500, 9777, 6763, 4626, 8463, 7127, 6901, 3877, 6071, 3879, 8475, 1430, 1721, 806, 5338, 5580, 8610, 1241, 9242, 9134, 3316, 6589, 8475, 9488, 5181, 1742, 8782, 7063, 5686, 615, 7087, 1171, 2642, 7694, 6838, 9870, 6512, 9583, 87, 2121, 5313, 292, 5545, 5038, 1275, 1631, 8993, 8222, 171, 7813, 7754, 1192, 2051, 6472, 8801, 5464, 2669, 8396, 147, 5732, 8196, 1807, 1782, 6150, 3345, 4757, 1529, 8951, 1680, 4321, 5668, 3343, 6974, 8788, 6045, 436, 1489, 3582, 5869, 1797, 2327, 5554, 4905, 4304, 2746, 2510, 6758, 3618, 65, 5669, 8299, 4995, 4315, 458, 1089, 9937, 4912, 1019, 2991, 7, 5052, 9609, 1042, 424, 3139, 9766, 7074, 3270, 3650, 911, 674, 8937, 7778, 8933, 6189, 7878, 1609, 393, 2458, 2737, 5620, 5181, 2495, 474, 2388, 2925, 905, 5161, 6133, 830, 7469, 894, 8776, 5805, 3363, 4455, 5264, 3732, 8420, 1087, 7092, 614, 7351, 312, 1196, 5782, 5209, 5974, 5846, 7377, 4056, 7991, 6568, 4808, 8491, 6235, 1462, 4650, 3001, 4707, 9424, 7528, 2989, 442, 8859, 9733, 9919, 1758, 5931, 2125, 2311, 7484, 1065, 520, 4587, 9012, 2135, 8817, 6247, 5759, 4887, 5835, 1298, 416, 6898, 615, 7680, 2035, 7214, 3344, 4405, 7199, 1239, 57, 5301, 4315, 4330, 4757, 5439, 6903, 530, 4527, 4864, 954, 5163, 7522, 3183, 2094, 2605, 14, 1261, 5503, 2799, 8005, 1061, 1240, 3017, 3735, 2241, 4487, 4879, 604, 8482, 7175, 9130, 6961, 4367, 7263, 441, 8988, 5731, 3074, 4758, 507, 5095, 6959, 9389, 1074, 8130, 6910, 8370, 6981, 7181, 6321, 4792, 1640, 2139, 4866, 9954, 4234, 9644, 1123, 7415, 4399, 103, 3230, 5405, 862, 3155, 8327, 3239, 6556, 2517, 6436, 7367, 2946, 8703, 7756, 1411, 6035, 2661, 1036, 4641, 5512, 8740, 8235, 7932, 9328, 7339, 5134, 6981, 3807, 2644, 2877, 5775, 5788, 1560, 8585, 9833, 8568, 5484, 2843, 3230, 5027, 3784, 3005, 964, 1327, 652, 906, 4032, 5977, 1873, 4604, 6567, 1669, 1723, 9385, 2212, 3030, 4439, 4178, 7740, 9753, 8, 6429, 1983, 6123, 507, 719, 7433, 9223, 7853, 7643, 9687, 7687, 8677, 914, 2355, 6541, 8746, 3985, 9283, 5842, 5452, 1153, 7609, 9530, 1155, 8367, 5853, 6419, 7205, 2486, 4515, 3555, 2260, 3828, 1940, 1251, 4140, 4090, 389, 7917, 3685, 1589, 6303, 1214, 8280, 8337, 9223, 730, 6774, 2397, 3025, 4314, 7331, 2759, 8601, 9562, 3120, 2646, 317, 1276, 8974, 3446, 2797, 1471, 8825, 9075, 2450, 5363, 5760, 610, 5158, 1773, 9023, 3453, 7890, 9245, 1953, 383, 4931, 856, 6815, 9508, 9289, 3344, 5976, 2881, 3173, 4929, 2413, 6906, 6389, 6966, 3676, 7092, 9042, 6508, 7640, 3279, 7283, 9008, 5089, 7963, 4362, 93, 3486, 6491, 6768, 4235, 6019, 5797, 2376, 2944, 4062, 7109, 6943, 8872, 1429, 9931, 8538, 9686, 9868, 6510, 6062, 8343, 8540, 8295, 5731, 6093, 8019, 7080, 9353, 6086, 5728, 5810, 4900, 3918, 712, 2864, 479, 1304, 5511, 8948, 777, 9865, 3507, 4473, 8504, 3715, 3589, 2696, 2922, 3644, 9600, 355, 189, 1333, 5116, 5062, 5212, 8125, 1753, 3898, 4469, 2833, 6531, 3317, 9972, 892, 8709, 2302, 2560, 9139, 9723, 5178, 8185, 62, 8104, 3706, 9828, 3965, 9146, 1332, 8129, 6892, 616, 5111, 4466, 11, 5887, 2890, 3827, 9275, 4273, 5389, 7869, 3168, 1536, 7342, 809, 8204, 2681, 6424, 3331, 775, 1887, 7240, 6751, 8579, 6946, 908, 5187, 1841, 4778, 3374, 8838, 6354, 8654, 1696, 2622, 6107, 1820, 9395, 1253, 3503, 7943, 960, 5648, 5332, 1454, 1654, 9124, 8333, 8728, 1333, 4130, 4991, 8194, 6358, 3162, 5807, 3005, 5668, 620, 2276, 5271, 2730, 6739, 9526, 6899, 8779, 9398, 1012, 6684, 2840, 921, 2125, 7259, 9542, 4211, 1216, 3762, 6545, 882, 3798, 3787, 8189, 5183, 2188, 2019, 2122, 3764, 3933, 9955, 1557, 3245, 9121, 2817, 8707, 3326, 2272, 7243, 4649, 4350, 6412, 8204, 562, 7003, 2309, 3184, 9647, 3980, 7484, 135, 7664, 2758, 7670, 2494, 7352, 6338, 2896, 6141, 7661, 7141, 902, 9145, 6311, 6517, 5436, 6574, 1081, 536, 6026, 7786, 9929, 2725, 1099, 5913, 9574, 8738, 1357, 5989, 6990, 7206, 7713, 9791, 5839, 6998, 5743, 6283, 4081, 2542, 7083, 9044, 9346, 621, 6972, 9400, 2461, 837, 3622, 4419, 5114, 7704, 9856, 211, 9173, 1649, 485, 6212, 9510, 5333, 2936, 5502, 6477, 9126, 5699, 3765, 708, 1926, 6021, 324, 5057, 6636, 7437, 8408, 3886, 7979, 3667, 3547, 6840, 4217, 1580, 9001, 129, 870, 1311, 7777, 3319, 2819, 6473, 4812, 9190, 1466, 990, 1771, 23, 6898, 7818, 2898, 77, 6232, 2916, 5302, 2842, 8975, 9093, 5219, 7608, 5770, 932, 3329, 8936, 4075, 4065, 1246, 740, 2707, 525, 1673, 2895, 9832, 3425, 9516, 9689, 5676, 928, 7079, 1879, 8276, 1537, 7421, 3663, 326, 2913, 9683, 6074, 631, 1713, 6015, 8076, 758, 9404, 3707, 156, 2420, 7234, 3387, 2502, 7615, 328, 2652, 2967, 1855, 7988, 5956, 977, 4898, 3536, 3853, 5677, 1253, 7656, 9478, 6856, 4709, 2622, 86, 2697, 9546};
        int[] expectedOutput = {7, 8, 11, 14, 23, 57, 62, 65, 77, 86, 87, 93, 103, 129, 135, 147, 156, 171, 175, 189, 195, 211, 215, 239, 244, 282, 292, 312, 317, 324, 326, 328, 355, 383, 389, 393, 412, 416, 424, 426, 436, 441, 442, 458, 474, 479, 485, 507, 507, 517, 520, 525, 530, 536, 562, 604, 610, 614, 615, 615, 616, 620, 621, 631, 652, 674, 708, 712, 719, 730, 740, 746, 758, 767, 775, 777, 792, 798, 806, 809, 830, 837, 856, 862, 870, 870, 882, 892, 894, 902, 905, 906, 908, 911, 914, 914, 921, 923, 928, 929, 932, 954, 960, 964, 977, 990, 1012, 1019, 1030, 1036, 1042, 1061, 1063, 1065, 1074, 1081, 1086, 1087, 1089, 1093, 1098, 1099, 1115, 1118, 1123, 1123, 1153, 1155, 1158, 1170, 1171, 1192, 1196, 1214, 1216, 1239, 1240, 1241, 1246, 1251, 1253, 1253, 1261, 1275, 1276, 1285, 1298, 1304, 1311, 1327, 1329, 1332, 1333, 1333, 1357, 1394, 1411, 1429, 1430, 1430, 1436, 1454, 1462, 1466, 1471, 1477, 1489, 1501, 1529, 1536, 1537, 1557, 1560, 1580, 1589, 1609, 1631, 1640, 1649, 1654, 1669, 1673, 1680, 1696, 1713, 1721, 1723, 1725, 1742, 1752, 1753, 1758, 1760, 1767, 1771, 1773, 1780, 1782, 1783, 1797, 1805, 1807, 1820, 1840, 1841, 1844, 1855, 1871, 1873, 1879, 1887, 1893, 1897, 1926, 1940, 1953, 1967, 1972, 1983, 2019, 2035, 2051, 2076, 2094, 2121, 2122, 2125, 2125, 2135, 2139, 2155, 2175, 2181, 2188, 2212, 2216, 2241, 2260, 2272, 2276, 2302, 2309, 2311, 2313, 2327, 2342, 2355, 2376, 2379, 2388, 2397, 2397, 2413, 2420, 2450, 2458, 2459, 2461, 2479, 2486, 2486, 2494, 2495, 2502, 2510, 2517, 2542, 2560, 2605, 2616, 2622, 2622, 2642, 2644, 2646, 2652, 2660, 2661, 2669, 2681, 2696, 2697, 2707, 2725, 2730, 2737, 2746, 2750, 2758, 2759, 2797, 2799, 2817, 2819, 2833, 2840, 2842, 2843, 2864, 2877, 2881, 2890, 2895, 2896, 2898, 2909, 2913, 2916, 2922, 2925, 2936, 2944, 2946, 2967, 2989, 2991, 2992, 3001, 3005, 3005, 3017, 3018, 3019, 3025, 3030, 3030, 3074, 3086, 3120, 3139, 3150, 3151, 3155, 3156, 3162, 3168, 3172, 3173, 3183, 3184, 3185, 3220, 3230, 3230, 3239, 3245, 3270, 3279, 3316, 3317, 3319, 3326, 3329, 3331, 3343, 3344, 3344, 3345, 3350, 3352, 3363, 3372, 3374, 3387, 3425, 3446, 3453, 3474, 3486, 3487, 3503, 3507, 3518, 3536, 3547, 3555, 3582, 3589, 3606, 3618, 3622, 3643, 3644, 3650, 3663, 3665, 3667, 3676, 3685, 3706, 3707, 3715, 3732, 3735, 3747, 3762, 3764, 3765, 3784, 3787, 3798, 3799, 3807, 3827, 3828, 3832, 3853, 3877, 3879, 3879, 3886, 3898, 3918, 3926, 3933, 3965, 3980, 3985, 4014, 4022, 4032, 4033, 4056, 4058, 4062, 4065, 4075, 4081, 4090, 4130, 4140, 4154, 4178, 4197, 4211, 4217, 4233, 4234, 4234, 4235, 4246, 4273, 4304, 4314, 4315, 4315, 4321, 4330, 4350, 4362, 4367, 4399, 4403, 4405, 4419, 4439, 4455, 4466, 4469, 4473, 4487, 4515, 4515, 4527, 4556, 4587, 4598, 4604, 4609, 4612, 4626, 4641, 4649, 4650, 4662, 4694, 4707, 4709, 4757, 4757, 4758, 4773, 4778, 4792, 4808, 4812, 4832, 4839, 4864, 4866, 4879, 4887, 4888, 4898, 4900, 4905, 4912, 4929, 4931, 4991, 4995, 5009, 5027, 5038, 5039, 5052, 5057, 5062, 5070, 5087, 5089, 5095, 5111, 5114, 5116, 5134, 5141, 5158, 5161, 5163, 5178, 5181, 5181, 5183, 5187, 5209, 5212, 5219, 5236, 5241, 5264, 5271, 5298, 5301, 5302, 5313, 5331, 5332, 5333, 5338, 5363, 5389, 5405, 5436, 5439, 5452, 5464, 5482, 5484, 5495, 5502, 5503, 5504, 5511, 5512, 5545, 5554, 5580, 5620, 5623, 5634, 5643, 5648, 5665, 5668, 5668, 5669, 5669, 5671, 5676, 5677, 5678, 5686, 5699, 5719, 5728, 5731, 5731, 5732, 5743, 5759, 5760, 5770, 5775, 5782, 5788, 5797, 5805, 5807, 5809, 5810, 5824, 5835, 5839, 5842, 5846, 5853, 5869, 5887, 5894, 5913, 5931, 5956, 5973, 5974, 5976, 5977, 5989, 6015, 6019, 6021, 6026, 6035, 6045, 6062, 6071, 6074, 6077, 6086, 6093, 6107, 6114, 6122, 6123, 6133, 6141, 6146, 6150, 6183, 6189, 6190, 6196, 6212, 6232, 6235, 6236, 6247, 6256, 6283, 6286, 6303, 6311, 6321, 6338, 6354, 6358, 6384, 6389, 6412, 6419, 6424, 6429, 6436, 6437, 6455, 6467, 6467, 6472, 6473, 6477, 6485, 6491, 6508, 6510, 6512, 6517, 6531, 6539, 6541, 6545, 6553, 6554, 6556, 6567, 6568, 6574, 6575, 6589, 6636, 6681, 6684, 6723, 6739, 6751, 6758, 6763, 6768, 6774, 6796, 6815, 6838, 6840, 6856, 6881, 6892, 6897, 6898, 6898, 6899, 6901, 6903, 6906, 6910, 6913, 6943, 6946, 6959, 6961, 6966, 6972, 6974, 6981, 6981, 6984, 6990, 6998, 7003, 7010, 7016, 7063, 7074, 7079, 7080, 7083, 7087, 7092, 7092, 7098, 7109, 7124, 7127, 7141, 7142, 7166, 7175, 7181, 7199, 7205, 7206, 7212, 7214, 7234, 7238, 7240, 7243, 7259, 7259, 7263, 7283, 7331, 7339, 7342, 7351, 7352, 7367, 7377, 7379, 7415, 7421, 7433, 7437, 7463, 7469, 7469, 7484, 7484, 7500, 7522, 7528, 7608, 7608, 7608, 7609, 7615, 7640, 7643, 7656, 7661, 7664, 7670, 7680, 7687, 7694, 7704, 7706, 7713, 7734, 7740, 7750, 7754, 7756, 7777, 7778, 7786, 7800, 7813, 7818, 7853, 7869, 7878, 7890, 7917, 7929, 7932, 7938, 7943, 7963, 7973, 7979, 7988, 7989, 7991, 8005, 8019, 8068, 8076, 8087, 8104, 8125, 8129, 8130, 8142, 8156, 8185, 8189, 8194, 8196, 8204, 8204, 8222, 8235, 8268, 8276, 8280, 8295, 8299, 8308, 8327, 8333, 8333, 8337, 8343, 8359, 8366, 8367, 8370, 8396, 8408, 8420, 8439, 8463, 8475, 8475, 8482, 8491, 8503, 8504, 8538, 8540, 8568, 8579, 8585, 8601, 8607, 8610, 8650, 8654, 8677, 8703, 8707, 8709, 8728, 8738, 8739, 8740, 8746, 8776, 8779, 8782, 8788, 8801, 8817, 8825, 8838, 8859, 8872, 8933, 8936, 8937, 8948, 8951, 8974, 8975, 8980, 8988, 8993, 9001, 9008, 9012, 9023, 9042, 9044, 9075, 9093, 9121, 9124, 9126, 9130, 9134, 9139, 9145, 9146, 9173, 9190, 9223, 9223, 9238, 9240, 9242, 9245, 9248, 9251, 9275, 9276, 9283, 9289, 9318, 9328, 9346, 9346, 9353, 9373, 9385, 9389, 9395, 9398, 9400, 9404, 9409, 9424, 9425, 9478, 9488, 9489, 9495, 9508, 9510, 9516, 9526, 9530, 9542, 9543, 9546, 9562, 9574, 9580, 9583, 9600, 9609, 9644, 9647, 9650, 9676, 9683, 9686, 9687, 9689, 9692, 9723, 9733, 9745, 9753, 9766, 9777, 9778, 9791, 9828, 9832, 9833, 9847, 9856, 9865, 9868, 9870, 9873, 9875, 9875, 9892, 9919, 9920, 9929, 9931, 9936, 9937, 9940, 9954, 9955, 9956, 9972, 9993};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts a 1000-Element Array (2)")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSort1000ElementArray2(SortingMethodForTest sortingMethodForTest) {
        int[] input = {};
        int[] expectedOutput = {2, 8, 9, 37, 44, 45, 62, 84, 90, 92, 113, 150, 161, 173, 176, 179, 187, 191, 204, 248, 258, 261, 262, 267, 283, 285, 301, 301, 311, 311, 315, 321, 321, 328, 333, 340, 348, 360, 369, 370, 371, 400, 412, 417, 428, 430, 435, 446, 454, 463, 482, 506, 520, 547, 548, 550, 565, 567, 582, 587, 591, 598, 602, 605, 609, 613, 631, 650, 665, 669, 676, 690, 705, 713, 726, 744, 750, 760, 769, 784, 787, 809, 811, 834, 836, 839, 842, 851, 871, 876, 882, 883, 886, 887, 887, 898, 904, 928, 934, 941, 942, 978, 981, 1002, 1004, 1015, 1023, 1029, 1054, 1056, 1059, 1062, 1076, 1078, 1090, 1098, 1109, 1113, 1117, 1120, 1125, 1126, 1169, 1179, 1193, 1216, 1225, 1243, 1265, 1265, 1291, 1294, 1297, 1306, 1307, 1321, 1323, 1338, 1344, 1372, 1374, 1381, 1385, 1400, 1414, 1415, 1415, 1428, 1450, 1469, 1472, 1496, 1500, 1524, 1526, 1531, 1532, 1541, 1551, 1559, 1560, 1564, 1565, 1598, 1608, 1622, 1628, 1640, 1647, 1650, 1659, 1671, 1683, 1708, 1715, 1732, 1736, 1736, 1741, 1749, 1749, 1760, 1777, 1779, 1785, 1796, 1799, 1820, 1845, 1851, 1853, 1878, 1879, 1881, 1886, 1887, 1888, 1963, 1977, 1984, 1991, 2003, 2005, 2024, 2037, 2038, 2050, 2060, 2068, 2088, 2089, 2110, 2132, 2139, 2147, 2152, 2159, 2161, 2181, 2183, 2186, 2209, 2215, 2222, 2250, 2274, 2278, 2284, 2295, 2310, 2315, 2323, 2335, 2350, 2357, 2360, 2367, 2379, 2380, 2397, 2401, 2403, 2410, 2418, 2422, 2442, 2447, 2453, 2463, 2470, 2471, 2492, 2536, 2542, 2544, 2566, 2576, 2581, 2585, 2588, 2589, 2609, 2624, 2631, 2640, 2652, 2653, 2690, 2697, 2703, 2715, 2719, 2726, 2731, 2733, 2737, 2756, 2760, 2767, 2783, 2783, 2807, 2810, 2811, 2817, 2837, 2850, 2857, 2860, 2867, 2871, 2877, 2881, 2881, 2887, 2891, 2901, 2914, 2919, 2932, 2939, 2941, 2942, 2946, 2969, 2983, 2983, 2987, 2988, 3002, 3011, 3016, 3032, 3059, 3065, 3073, 3137, 3150, 3156, 3173, 3192, 3193, 3194, 3198, 3199, 3200, 3207, 3209, 3213, 3228, 3231, 3231, 3265, 3297, 3301, 3313, 3352, 3412, 3416, 3416, 3424, 3425, 3425, 3432, 3470, 3480, 3487, 3493, 3497, 3502, 3516, 3522, 3523, 3526, 3530, 3541, 3542, 3576, 3602, 3608, 3611, 3622, 3654, 3680, 3682, 3684, 3696, 3699, 3701, 3704, 3722, 3724, 3734, 3743, 3752, 3767, 3783, 3784, 3800, 3800, 3802, 3814, 3825, 3845, 3853, 3861, 3878, 3880, 3888, 3891, 3896, 3912, 3914, 3918, 3921, 3930, 3935, 3945, 3954, 3967, 3980, 3994, 3996, 4017, 4017, 4077, 4095, 4107, 4130, 4140, 4171, 4174, 4182, 4184, 4201, 4210, 4213, 4222, 4239, 4252, 4260, 4284, 4287, 4297, 4304, 4317, 4329, 4334, 4349, 4351, 4351, 4352, 4354, 4356, 4360, 4361, 4372, 4376, 4383, 4390, 4393, 4400, 4401, 4402, 4416, 4418, 4446, 4454, 4482, 4486, 4498, 4508, 4523, 4526, 4526, 4551, 4560, 4562, 4569, 4569, 4584, 4599, 4604, 4607, 4610, 4622, 4623, 4630, 4636, 4637, 4653, 4653, 4668, 4672, 4691, 4696, 4697, 4724, 4726, 4728, 4749, 4766, 4767, 4768, 4778, 4779, 4779, 4784, 4791, 4791, 4797, 4804, 4813, 4817, 4821, 4841, 4915, 4916, 4920, 4923, 4928, 4929, 4929, 4931, 4932, 4933, 4940, 4945, 4945, 4957, 4962, 4975, 4985, 5004, 5028, 5040, 5060, 5076, 5079, 5081, 5109, 5127, 5133, 5133, 5154, 5160, 5162, 5181, 5187, 5193, 5195, 5215, 5215, 5221, 5222, 5227, 5236, 5273, 5278, 5288, 5291, 5300, 5333, 5339, 5345, 5354, 5366, 5373, 5393, 5396, 5421, 5426, 5429, 5431, 5450, 5465, 5483, 5504, 5510, 5513, 5517, 5520, 5526, 5535, 5547, 5560, 5576, 5584, 5608, 5615, 5632, 5634, 5634, 5648, 5653, 5657, 5673, 5694, 5698, 5703, 5719, 5739, 5765, 5786, 5791, 5793, 5794, 5798, 5814, 5839, 5851, 5878, 5882, 5892, 5897, 5905, 5924, 5926, 5926, 5933, 5953, 5957, 5958, 5959, 5961, 5984, 5990, 6009, 6041, 6079, 6083, 6089, 6099, 6116, 6131, 6185, 6186, 6193, 6219, 6242, 6246, 6250, 6251, 6268, 6281, 6294, 6300, 6308, 6357, 6370, 6374, 6375, 6404, 6405, 6422, 6422, 6427, 6430, 6434, 6449, 6458, 6487, 6498, 6502, 6509, 6525, 6528, 6530, 6533, 6534, 6536, 6543, 6547, 6556, 6565, 6572, 6588, 6599, 6600, 6605, 6619, 6624, 6630, 6634, 6652, 6669, 6678, 6694, 6694, 6702, 6728, 6753, 6774, 6774, 6785, 6788, 6797, 6801, 6810, 6816, 6828, 6829, 6840, 6843, 6861, 6863, 6877, 6890, 6894, 6906, 6916, 6922, 6929, 6937, 6962, 6977, 7002, 7002, 7014, 7022, 7030, 7032, 7034, 7045, 7068, 7075, 7092, 7099, 7101, 7102, 7109, 7114, 7130, 7138, 7168, 7168, 7183, 7184, 7184, 7190, 7206, 7218, 7227, 7228, 7240, 7242, 7249, 7273, 7288, 7319, 7325, 7333, 7353, 7380, 7390, 7392, 7400, 7404, 7405, 7406, 7415, 7417, 7419, 7427, 7428, 7434, 7446, 7447, 7456, 7468, 7501, 7509, 7532, 7542, 7542, 7548, 7551, 7553, 7563, 7567, 7587, 7597, 7599, 7601, 7612, 7615, 7615, 7622, 7623, 7629, 7633, 7638, 7650, 7654, 7669, 7687, 7700, 7739, 7742, 7751, 7754, 7754, 7757, 7763, 7777, 7791, 7796, 7796, 7829, 7847, 7848, 7863, 7865, 7875, 7894, 7894, 7899, 7903, 7917, 7931, 7934, 7943, 7945, 8004, 8036, 8041, 8061, 8065, 8077, 8094, 8098, 8112, 8132, 8136, 8179, 8197, 8205, 8212, 8215, 8235, 8243, 8256, 8258, 8268, 8296, 8305, 8307, 8321, 8336, 8350, 8355, 8380, 8384, 8387, 8387, 8416, 8432, 8437, 8461, 8463, 8464, 8476, 8482, 8489, 8492, 8500, 8506, 8507, 8509, 8517, 8522, 8525, 8525, 8530, 8544, 8546, 8555, 8564, 8572, 8573, 8586, 8598, 8604, 8613, 8636, 8636, 8638, 8660, 8681, 8689, 8692, 8695, 8701, 8713, 8718, 8723, 8732, 8736, 8737, 8743, 8756, 8761, 8793, 8796, 8800, 8801, 8813, 8830, 8851, 8854, 8863, 8883, 8886, 8890, 8902, 8911, 8924, 8927, 8938, 8952, 8956, 8976, 8976, 8985, 8986, 8994, 8995, 8996, 9025, 9056, 9060, 9075, 9095, 9103, 9105, 9121, 9121, 9125, 9128, 9131, 9150, 9151, 9159, 9161, 9164, 9170, 9180, 9185, 9217, 9250, 9252, 9255, 9256, 9263, 9266, 9268, 9283, 9306, 9312, 9320, 9332, 9334, 9349, 9374, 9386, 9402, 9410, 9427, 9437, 9453, 9491, 9502, 9502, 9509, 9509, 9514, 9524, 9546, 9551, 9564, 9568, 9577, 9609, 9617, 9636, 9649, 9652, 9674, 9675, 9679, 9688, 9711, 9713, 9719, 9722, 9730, 9742, 9745, 9749, 9754, 9783, 9799, 9804, 9815, 9815, 9829, 9850, 9856, 9868, 9885, 9885, 9891, 9892, 9902, 9908, 9916, 9944, 9952, 9954, 9956};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts a 20-Element Array (1)")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSort20EltArray1(SortingMethodForTest sortingMethodForTest) {
        int[] input = {677, 929, 534, 409, 646, 513, 968, 215, 785, 712, 352, 317, 307, 946, 57, 298, 391, 998, 800, 48};
        int[] expectedOutput = {48, 57, 215, 298, 307, 317, 352, 391, 409, 513, 534, 646, 677, 712, 785, 800, 929, 946, 968, 998};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts a 21-Element Array (1)")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSort21EltArray1(SortingMethodForTest sortingMethodForTest) {
        int[] input = {747, 898, 404, 283, 671, 210, 568, 402, 545, 650, 78, 742, 638, 36, 169, 672, 657, 107, 445, 534, 802};
        int[] expectedOutput = {36, 78, 107, 169, 210, 283, 402, 404, 445, 534, 545, 568, 638, 650, 657, 671, 672, 742, 747, 802, 898};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts a 40-Element Array (1)")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSort40EltArray1(SortingMethodForTest sortingMethodForTest) {
        int[] input = {496, 683, 806, 633, 784, 560, 157, 457, 633, 237, 838, 187, 521, 478, 240, 957, 840, 73, 904, 879, 377, 335, 274, 728, 679, 722, 847, 635, 480, 285, 159, 497, 153, 169, 412, 610, 640, 718, 292, 955};
        int[] expectedOutput = {73, 153, 157, 159, 169, 187, 237, 240, 274, 285, 292, 335, 377, 412, 457, 478, 480, 496, 497, 521, 560, 610, 633, 633, 635, 640, 679, 683, 718, 722, 728, 784, 806, 838, 840, 847, 879, 904, 955, 957};
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }

    @DisplayName("Sorts a 10_000 integer array")
    @ParameterizedTest(name = "{0}")
    @MethodSource("data")
    public void testSort10_000Integers(SortingMethodForTest sortingMethodForTest) {
        LargeNumberFileReader largeNumberFileReader = new LargeNumberFileReader();
        int[] input = largeNumberFileReader.readNumbersFromFile("tenThousandNumbers.txt");
        int[] expectedOutput = largeNumberFileReader.readNumbersFromFile("tenThousandAscending.txt");
        sortingMethodForTest.sortingMethod.sort(input);
        assertArrayEquals(expectedOutput, input);
    }
}
